Solution 1
# Generate dataset
from sklearn.datasets import make_regression as mr
X,y = mr(n_samples=1000, n_features=6, noise=0)

import numpy as np
import matplotlib.pyplot as plt

fig2,ax= plt.subplots(2,3,figsize=(10,10))
for i in range(6):
  plt.subplot(231+i)        
  plt.scatter(X[:,i],y, color='blue')     #plot each feature column against target column
  a,b=np.polyfit(X[:,i],y,1)          #find the best fit line
  plt.plot(X[:,i],a*X[:,i]+b, color='red')        #plot the line

Solution 2
from sklearn.datasets import make_classification as mc
X,y= mc(n_samples=1000,n_features=2, n_informative=2, n_redundant=0,n_classes=2,n_clusters_per_class=2)

plt.scatter(X[:, 0],X[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

Solution 3
from sklearn.datasets import make_blobs as mb
X,y = mb(n_samples=1000, centers=4, n_features=2)

plt.scatter(X[:, 0],X[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

Solution 4
import requests as req
url = 'https://www.worldometers.info/coronavirus/'
page = req.get(url)
from bs4 import BeautifulSoup
soup = BeautifulSoup(page.text, 'html.parser')
table1 = soup.find('table', id='main_table_countries_today')

headers = []
for i in table1.find_all('th'):
 title = i.text
 headers.append(title)
headers

import pandas as pd
mydata = pd.DataFrame(columns = headers)
for j in table1.find_all('tr', )[2:]:
 row_data = j.find_all('td')
 row = [i.text for i in row_data]
 length = len(mydata)
 mydata.loc[length] = row

columns=['Country,Other','Continent','Population','TotalCases','NewCases','TotalDeaths','NewDeaths','TotalRecovered','NewRecovered','ActiveCases']
mydata=mydata[columns]
mydata.head()

Solution 5
from sklearn.datasets import make_classification
X,y = make_classification(n_samples=1000, n_features=2, n_redundant=0,n_clusters_per_class=1, weights=[0.95], flip_y=0)
import numpy as np
print(np.unique(y,return_counts=True))

import matplotlib.pyplot as plt
plt.scatter(X[:, 0],X[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

from imblearn.over_sampling import SMOTE
over = SMOTE(sampling_strategy=0.2638)
X, y = over.fit_resample(X, y)
print(np.unique(y,return_counts=True))

plt.scatter(X[:, 0],X[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

from imblearn.under_sampling import RandomUnderSampler
under = RandomUnderSampler(sampling_strategy=0.3333)
X, y = under.fit_resample(X, y)
print(np.unique(y,return_counts=True))

plt.scatter(X[:, 0],X[:,1], c=y)
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()

Solution 6
from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target

import pandas as pd
df = pd.DataFrame(X, columns=iris.feature_names)
df.head()

df.isna().sum()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
my_scaler = StandardScaler()
X_train = my_scaler.fit_transform(X_train)
X_test = my_scaler.transform(X_test)
X_train = pd.DataFrame(X_train,columns=iris.feature_names)
X_train.head()   
